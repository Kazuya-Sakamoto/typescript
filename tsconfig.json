{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Basic Options */
    // "incremental": true,                   /* Enable incremental compilation */
    "target": "es6",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */
    "module": "ES6",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */ //* import {} from ''を使用する
    // "lib": [
    //   "ES6",
    //   "DOM"
    // ],                                     //* 使用するライブラリー 例)型推論してあらゆるメソッドを使用できることを止めれる
    // "allowJs": true,                       /* Allow javascript files to be compiled. */ //* javaScriptもコンパイラさせる
    // "checkJs": true,                       /* Report errors in .js files. */ //* allowJsと並行して利用する javaScriptもErrorを教えてくれる
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. */ //* 型定義ファイルを作成する
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */ //* 型定義ファイルを作成する
    // "sourceMap": true,                     /* Generates corresponding '.map' file. */ //* ブラウザでtsファイルを見たい時に使用する
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    "outDir": "./dist",                        /* Redirect output structure to the directory. */ //* フォルダーの中にコンパイラされたjsファイルを格納する
    // "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */ //* typescriptがあるフォルウダーを明示的に指定する
    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    // "removeComments": true,                /* Do not emit comments to output. */ //* コメントアウトを取り除く
    // "noEmit": true,                        /* Do not emit outputs. */ //* 型チェックのみ Errorが起きていないか見たい時に
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */ //* ES5以下のversionでfor が起動しないとき
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true,                           /* Enable all strict type-checking options. */ //* ここをtrueにするとalwaysStrictまでコメントアウトしているのと同様
    // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */ //* 暗黙的な any はErrorをだす 型宣言していないfunctionなど
    // "strictNullChecks": true,              /* Enable strict null checks. */
    // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
    // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */ //* コードの品質を保つ
    // "noUnusedLocals": true,                /* Report errors on unused locals. */ //* 定義してるけど使ってない変数をErrorをだす
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */ //* 暗黙的な return はだめ
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */ //* 実験的に decorator を使用する
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    "skipLibCheck": true,                     /* Skip type checking of declaration files. */
    "forceConsistentCasingInFileNames": true  /* Disallow inconsistently-cased references to the same file. */
  },
  // * 特定のファイルを指定してコンパイラされるようにする
  "include": [
    // "src/TypeScript/index.ts",
    // "src/TypeScript/comp.ts",
    // "src/TypeScript/class.ts",
    // "src/TypeScript/interface.ts",
    // "src/TypeScript/advanced.ts",
    // "src/TypeScript/generics.ts",
    // "src/TypeScript/decorator.ts",
    "src/food-app",
  ],
  // * 特定のファイルをコンパイラされるのを除く
  "exclude": [
    // "Type/compiler.ts",
    // "**/compiler.ts", //? ワイルドカード
    // "*.spec.ts", //? ある拡張子はしないってできる
    "node_modules"
  ]
}
